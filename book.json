[
  {
    "name": "Propositional classical logic",
    "problems":
    [
      {
        "id": "1.14.1.a",
        "logic": "PropositionalLogic",
        "expected": "proved",
        "premises": [ "p ⊃ q", "r ⊃ q" ],
        "conclusion": "(p ∨ r) ⊃ q"
      },
      {
        "id": "1.14.1.b",
        "logic": "PropositionalLogic",
        "expected": "proved",
        "premises": [ "p ⊃ (q ∧ r)", "¬r" ],
        "conclusion": "¬p"
      },
      {
        "id": "1.14.1.c",
        "logic": "PropositionalLogic",
        "expected": "not-proved",
        "premises": [],
        "conclusion": "((p ⊃ q) ⊃ q) ⊃ q"
      },
      {
        "id": "1.14.1.d",
        "logic": "PropositionalLogic",
        "expected": "not-proved",
        "premises": [],
        "conclusion": "((p ⊃ q) ∧ (¬p ⊃ q)) ⊃ ¬p"
      },
      {
        "id": "1.14.1.e",
        "logic": "PropositionalLogic",
        "expected": "proved",
        "premises": [ "p ≡ (q ≡ r)" ],
        "conclusion": "(p ≡ q) ≡ r"
      },
      {
        "id": "1.14.1.f",
        "logic": "PropositionalLogic",
        "expected": "proved",
        "premises": [ "¬(p ⊃ q) ∧ ¬(p ⊃ r)" ],
        "conclusion": "¬q ∨ ¬r"
      },
      {
        "id": "1.14.1.g",
        "logic": "PropositionalLogic",
        "expected": "not-proved",
        "premises": [ "p ∧ (¬r ∨ s)", "¬(q ⊃ s)" ],
        "conclusion": "r"
      },
      {
        "id": "1.14.1.h",
        "logic": "PropositionalLogic",
        "expected": "proved",
        "premises": [],
        "conclusion": "(p ⊃ (q ⊃ r)) ⊃ (q ⊃ (p ⊃ r))"
      },
      {
        "id": "1.14.1.i",
        "logic": "PropositionalLogic",
        "expected": "not-proved",
        "premises": [ "¬(p ∧ ¬q) ∨ r", "p ⊃ (r ≡ s)" ],
        "conclusion": "p ≡ q"
      },
      {
        "id": "1.14.1.j",
        "logic": "PropositionalLogic",
        "expected": "proved",
        "premises": [ "p ≡ ¬¬q", "¬q ⊃ (r ∧ ¬s)", "s ⊃ (p ∨ q)" ],
        "conclusion": "(s ∧ q) ⊃ p"
      }
    ]
  },
  {
    "name": "QuantifierParserTest",
    "problems":
    [
      {
        "id": "test1",
        "logic": "FirstOrderLogic",
        "expected": "proved",
        "premises": [ "∀x (P[x] ⊃ ∃y S[x,y])" ],
        "conclusion": "∀x ∃y (P[x] ⊃ S[x,y])"
      },
      {
        "id": "test2",
        "logic": "FirstOrderLogic",
        "expected": "proved",
        "premises": [ "∃x ¬∃y S[x,y]" ],
        "conclusion": "¬∃x ∀y S[y,x]"
      },
      {
        "id": "test3",
        "logic": "FirstOrderLogic",
        "expected": "proved",
        "premises": [],
        "conclusion": "∃x∃y P[x,y] ≡ ∃x∃y P[y,x]"
      }
    ]
  }
]